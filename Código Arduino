
#include <Servo.h>          //Biblioteca padrão do motor servo
#include <NewPing.h>        //Biblioteca utilizada pelo sensor HC-SR04

//Pins que controlam o driver L298n. Os pins foram trocados em relação ao projeto original para fazer uso da função digital PWM
const int LeftMotorForward = 6;
const int LeftMotorBackward = 11;
const int RightMotorForward = 5;
const int RightMotorBackward = 3;

//Pins que controlam o sensor HC-SR04
#define trig_pin A1 
#define echo_pin A2 

#define maximum_distance 200
boolean goesForward = false;
int distance = 100;

NewPing sonar(trig_pin, echo_pin, maximum_distance); //funcionamento do sensor
Servo servo_motor; 

void setup(){

  pinMode(RightMotorForward, OUTPUT);
  pinMode(LeftMotorForward, OUTPUT);
  pinMode(LeftMotorBackward, OUTPUT);
  pinMode(RightMotorBackward, OUTPUT);
  
  servo_motor.attach(9); //Pin que controla o motor servo

  servo_motor.write(115);
  delay(2000);
  distance = readPing(); //delay de disparos contínuos da onda sonora
  delay(100);
  distance = readPing();
  delay(100);
  distance = readPing();
  delay(100);
  distance = readPing();
  delay(100);
}

void loop(){

  int distanceRight = 0;
  int distanceLeft = 0;
  delay(50);

//se a distância for menos do que 20 cm, o carro parará e chamará as funções necessárias para dar ré, olhar para os lados e procurar pela melhor opção
  if (distance <= 20){
    moveStop();
    delay(300);
    moveBackward();
    delay(400);
    moveStop();
    delay(300);
    distanceRight = lookRight();
    delay(300);
    distanceLeft = lookLeft();
    delay(300);

    if (distance >= distanceLeft){
      turnRight();
      moveStop();
    }
    else{
      turnLeft();
      moveStop();
    }
  }
  else{
    moveForward(); 
  }
    distance = readPing();
}

//abaixo, funções que fazem o carro "olhar" para os lados, chamando a função read ping que fará a leitura da distância de cada lado

int lookRight(){  
  servo_motor.write(50);
  delay(500);
  int distance = readPing();
  delay(100);
  servo_motor.write(115);
  return distance;
}

int lookLeft(){
  servo_motor.write(170);
  delay(500);
  int distance = readPing();
  delay(100);
  servo_motor.write(115);
  return distance;
  delay(100);
}

int readPing(){
  delay(70);
  int cm = sonar.ping_cm(); //função do da biblioteca newping que traz a distância em centímetros
  if (cm==0){
    cm=250;
  }
  return cm;
}

//funções de movimento do carro abaixo. Para controlar a velocidade do motor e evitar que ele funcione sempre em força total, 
//foram utilizados comandos analogwrite(Digital PWM) declarando entre 0 e 255 o quanto de força deveria ser utilizada. 

void moveStop(){
  
  digitalWrite(RightMotorForward, LOW);
  digitalWrite(LeftMotorForward, LOW);
  digitalWrite(RightMotorBackward, LOW);
  digitalWrite(LeftMotorBackward, LOW);
}

void moveForward(){

  if(!goesForward){

    goesForward=true;
    
    analogWrite(LeftMotorForward, 170);
    analogWrite(RightMotorForward, 170);
  
    digitalWrite(LeftMotorBackward, LOW);
    digitalWrite(RightMotorBackward, LOW); 
  }
}

void moveBackward(){

  goesForward=false;

  digitalWrite(LeftMotorBackward, HIGH);
  digitalWrite(RightMotorBackward, HIGH);
  
  digitalWrite(LeftMotorForward, LOW);
  digitalWrite(RightMotorForward, LOW);
  
}

void turnRight(){

  analogWrite(LeftMotorForward, 160);
  analogWrite(RightMotorBackward, 160);
  
  digitalWrite(LeftMotorBackward, LOW);
  digitalWrite(RightMotorForward, LOW);
  
  delay(500);
  
  analogWrite(LeftMotorForward, 170);
  analogWrite(RightMotorForward, 170);
  
  digitalWrite(LeftMotorBackward, LOW);
  digitalWrite(RightMotorBackward, LOW);
 
}

void turnLeft(){

  analogWrite(LeftMotorBackward, 160);
  analogWrite(RightMotorForward, 160);
  
  digitalWrite(LeftMotorForward, LOW);
  digitalWrite(RightMotorBackward, LOW);

  delay(500);
  
  analogWrite(LeftMotorForward, 170);
  analogWrite(RightMotorForward, 170);
  
  digitalWrite(LeftMotorBackward, LOW);
  digitalWrite(RightMotorBackward, LOW);
}
